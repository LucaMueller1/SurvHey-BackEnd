openapi: 3.0.1
info:
  title: SurvHey BackEnd
  description: 'This is the OAS for the BackEnd of the SurvHey Project.'
  version: 1.0.0
servers:
  - url: http://localhost:8080/v2
tags:
  - name: survey
    description: Everything about surveys
  - name: submission
    description: Access to the submissions for your surveys
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Registers a new user
      operationId: createUser
      requestBody:
        description: User object to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      tags:
        - user
      summary: Get user by api_key
      description: This can only be done by the logged-in user and will return a user object
      operationId: getUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user
      operationId: deleteUser
      responses:
        200:
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: Object that stores user login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: This can only be done by the logged-in user
      operationId: logoutUser
      responses:
        200:
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /survey:
    post:
      tags:
        - survey
      summary: Create new survey
      description: Creates a new survey for the logged-in user
      operationId: createSurvey
      requestBody:
        description: Created survey object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyPrepare'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /surveys:
    get:
      tags:
        - survey
      summary: Return all surveys for the logged in user
      description: All surveys for the corresponding user are returned
      operationId: getSurveys
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /survey/{id}:
    get:
      tags:
        - survey
      summary: Get survey by id
      description: Returns survey by id without need for authentication. This endpoint returns the survey for end-users
      operationId: getSurveyById
      parameters:
        - name: id
          in: path
          description: ID of survey to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - survey
      summary: Update survey by id
      description: Updates the corresponding survey
      operationId: updateSurveyById
      requestBody:
        description: Created survey object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyPrepare'
      parameters:
        - name: id
          in: path
          description: ID of survey to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - survey
      summary: Delete survey by id
      description: Deletes the corresponding survey
      operationId: deleteSurveyById
      parameters:
        - name: id
          in: path
          description: ID of survey to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /survey/{id}/analysis:
    get:
      tags:
        - survey
      summary: Returns an analysis for the given survey
      description: Returns an analysis object that contains data about the survey participants
      operationId: getSurveyAnalysisById
      parameters:
        - name: id
          in: path
          description: ID of survey to return an analysis for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /survey/{id}/submissions:
    get:
      tags:
        - submission
      summary: Returns all submissions for the given survey
      description: Returns a list of all submissions for the given survey
      operationId: getSurveySubmissionsById
      parameters:
        - name: id
          in: path
          description: ID of survey to return all submissions for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
  /survey/{id}/results:
    get:
      tags:
        - submission
      summary: Returns results of the given survey
      description: Returns a more simple representation of survey results for the end-user to view
      operationId: getSurveyResultsById
      parameters:
        - name: id
          in: path
          description: ID of survey to return results for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /survey/{id}/submission:
    post:
      tags:
        - submission
      summary: Creates a new submission for the given survey
      description: Endpoint is used by the end-user to create a new submission
      operationId: createSurveySubmission
      requestBody:
        description: Created submission object for survey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionPrepare'
      parameters:
        - name: id
          in: path
          description: ID of survey to create a new submission for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /participant/{id}/surveys:
    get:
      tags:
        - submission
      summary: Return all surveys for the logged in user
      description: All surveys for the corresponding user are returned
      operationId: getParticipantsSurveys
      parameters:
        - name: id
          in: path
          description: id of participant to fetch surveys from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - ApiKeyAuth: []
components:
  schemas:
    User:
      required:
        - id
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          example: Luca
        lastName:
          type: string
          example: Mueller
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: lol123
    UserLogin:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: lol123
    Survey:
      required:
        - id
        - name
        - user
        - questions
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Survey about electric cars
        user:
          $ref: '#/components/schemas/User'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    SurveyPrepare:
      required:
        - name
        - questions
      type: object
      properties:
        name:
          type: string
          example: Survey about electric cars
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Question:
      required:
        - id
        - survey_id
        - text
      type: object
      properties:
        id:
          type: integer
          format: int64
        survey_id:
          type: integer
          format: int64
        text:
          type: string
          example: "What brand of electric car would you buy?"
        mode:
          type: string
          enum: [radio, check, text, rating, dropdown, nps, consent]
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'
    AnswerOption:
      required:
        - id
        - question_id
        - content
      type: object
      properties:
        id:
          type: integer
          format: int64
        question_id:
          type: integer
          format: int64
        content:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
          example: ["Tesla", "Hyundai", "Porsche"]
    QuestionResult:
      type: object
      properties:
        question_id:
          type: integer
          format: int64
        choices:
          type: object
          additionalProperties:
            type: integer
          example:
            Tesla: 0.65
            Hyundai: 0.15
            Porsche: 0.2
    Results:
      required:
        - survey_id
      type: object
      properties:
        survey_id:
          type: integer
          format: int64
        questionResults:
          type: array
          items:
            $ref: '#/components/schemas/QuestionResult'
    Submission:
      required:
        - id
        - participant
        - survey_id
        - timestamp
        - answers
      type: object
      properties:
        id:
          type: integer
          format: int64
        participant:
          $ref: '#/components/schemas/Participant'
        survey_id:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    SubmissionPrepare:
      required:
        - answers
      type: object
      properties:
        survey_id:
          type: integer
          format: int64
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    Answer:
      required:
        - id
        - question_id
        - choices
      type: object
      properties:
        id:
          type: integer
          format: int64
        question_id:
          type: integer
          format: int64
        mode:
          type: string
          enum: [radio, check, text, rating, dropdown, nps, consent]
        choices:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
              - type: integer
              - type: boolean
          example: ["Tesla", "Hyundai", "Porsche"]
    Participant:
      required:
        - id
        - ip_address
      type: object
      properties:
        id:
          type: integer
          format: int64
        ip_address:
          type: string
          format: ipv4
    Analysis:
      required:
        - id
        - survey_id
      type: object
      properties:
        id:
          type: integer
          format: int64
        survey_id:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
          example: 527
        countries:
          type: object
          additionalProperties:
            type: integer
          example:
            Germany: 69
            USA: 420
            Spain: 11
            Norway: 27
    AuthKey:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        authKey:
          type: string
          example: bWFnZ2llOnN1bW1lcXMgs29E
        expiry:
          type: string
          format: date-time
    ApiError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        type:
          type: string
          example: Not Found
        message:
          type: string
          example: Requested survey not found
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: api_key
      in: header